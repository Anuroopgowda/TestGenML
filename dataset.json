[
    {
        "code": "def add(a, b): return a + b",
        "test_case": "def test_add(): assert add(2, 3) == 5\n  assert add(1, 2) == 3"
    },
    {
        "code": "def multiply(a, b): return a * b",
        "test_case": "def test_multiply(): assert multiply(3, 4) == 12\n  assert multiply(1, 3) == 3"
    },
    {
        "code": "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)",
        "test_case": "def test_factorial():\n    assert factorial(1) == 1\n    assert factorial(2) == 2\n    assert factorial(3) == 6"
    },
 
    {
        "code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "test_case": "def test_is_prime():\n    assert is_prime(2) == True\n    assert is_prime(4) == False\n    assert is_prime(13) == True"
    },
    {
        "code": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    seq = [0, 1]\n    for _ in range(2, n):\n        seq.append(seq[-1] + seq[-2])\n    return seq",
        "test_case": "def test_fibonacci():\n    assert fibonacci(1) == [0]\n    assert fibonacci(5) == [0, 1, 1, 2, 3]\n    assert fibonacci(7) == [0, 1, 1, 2, 3, 5, 8]"
    },
    {
        "code": "def is_palindrome(s):\n    return s == s[::-1]",
        "test_case": "def test_is_palindrome():\n    assert is_palindrome('racecar') == True\n    assert is_palindrome('hello') == False\n    assert is_palindrome('madam') == True"
    },
    {
        "code": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)",
        "test_case": "def test_are_anagrams():\n    assert are_anagrams('listen', 'silent') == True\n    assert are_anagrams('hello', 'world') == False\n    assert are_anagrams('anagram', 'nagaram') == True"
    },
    {
        "code": "def is_armstrong(n):\n    digits = [int(d) for d in str(n)]\n    return sum(d ** len(digits) for d in digits) == n",
        "test_case": "def test_is_armstrong():\n    assert is_armstrong(153) == True\n    assert is_armstrong(9474) == True\n    assert is_armstrong(123) == False"
    },
    
    {
        "code": "def max_in_list(lst):\n    return max(lst) if lst else None",
        "test_case": "def test_max_in_list():\n    assert max_in_list([1, 3, 2, 8, 5]) == 8\n    assert max_in_list([-1, -5, -3]) == -1\n    assert max_in_list([]) == None"
    },
    {
        "code": "def is_even(n):\n    return n % 2 == 0",
        "test_case": "def test_is_even():\n    assert is_even(2) == True\n    assert is_even(7) == False\n    assert is_even(0) == True"
    },
    {
        "code": "def is_odd(n):\n    return n % 2 != 0",
        "test_case": "def test_is_odd():\n    assert is_odd(3) == True\n    assert is_odd(8) == False\n    assert is_odd(0) == False"
    }




]
